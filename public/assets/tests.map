{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","auctions/tests/app.lint-test.js","auctions/tests/helpers/destroy-app.js","auctions/tests/helpers/module-for-acceptance.js","auctions/tests/helpers/start-app.js","auctions/tests/integration/components/categories-component-test.js","auctions/tests/integration/components/footer-component-test.js","auctions/tests/integration/components/header-component-test.js","auctions/tests/integration/components/price-component-test.js","auctions/tests/integration/components/product-component-test.js","auctions/tests/integration/components/rating-component-test.js","auctions/tests/integration/helpers/contains-test.js","auctions/tests/integration/helpers/division-helper-test.js","auctions/tests/integration/helpers/if-equals-test.js","auctions/tests/integration/helpers/lowercase-test.js","auctions/tests/integration/helpers/pagination-array-test.js","auctions/tests/integration/helpers/uppercase-helper-test.js","auctions/tests/test-helper.js","auctions/tests/tests.lint-test.js","auctions/tests/unit/controllers/index-test.js","auctions/tests/unit/controllers/login-test.js","auctions/tests/unit/controllers/register-test.js","auctions/tests/unit/routes/admin-test.js","auctions/tests/unit/routes/application-test.js","auctions/tests/unit/routes/index-test.js","auctions/tests/unit/routes/login-test.js","auctions/tests/unit/routes/register-test.js","auctions/tests/unit/routes/seller-test.js","auctions/tests/unit/routes/user-test.js","auctions/tests/unit/services/ajax-test.js","auctions/tests/unit/services/product-service-test.js","auctions/tests/unit/services/user-service-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('auctions/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/categories-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/categories-component.js should pass ESLint\\n\\n6:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n21:13 - Use closure actions, unless you need bubbling (ember/closure-actions)');\n  });\n\n  QUnit.test('components/footer-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/footer-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/header-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/header-component.js should pass ESLint\\n\\n22:23 - \\'data\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/price-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/price-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/product-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/product-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rating-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/rating-component.js should pass ESLint\\n\\n10:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n10:17 - \\'Ember\\' is not defined. (no-undef)\\n26:14 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n26:14 - \\'Ember\\' is not defined. (no-undef)\\n34:14 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n34:14 - \\'Ember\\' is not defined. (no-undef)\\n42:16 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n42:16 - \\'Ember\\' is not defined. (no-undef)\\n50:15 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n50:15 - \\'Ember\\' is not defined. (no-undef)\\n58:15 - \\'Ember\\' is not defined. (no-undef)\\n58:15 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n67:9 - Use closure actions, unless you need bubbling (ember/closure-actions)\\n85:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/index.js should pass ESLint\\n\\n20:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n31:17 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n31:17 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n4:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass ESLint\\n\\n7:5 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('helpers/contains.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/contains.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/division-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/division-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/if-equals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/if-equals.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/lowercase-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/lowercase-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/pagination-array.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/pagination-array.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/uppercase-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/uppercase-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n21:37 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n53:12 - \\'error\\' is defined but never used. (no-unused-vars)\\n61:12 - \\'error\\' is defined but never used. (no-unused-vars)\\n69:12 - \\'error\\' is defined but never used. (no-unused-vars)\\n77:12 - \\'error\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n16:23 - \\'data\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/register.js should pass ESLint\\n\\n18:19 - \\'data\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/seller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/seller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/ajax.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/product-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/product-service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/user-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/user-service.js should pass ESLint\\n\\n');\n  });\n});","define('auctions/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('auctions/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'auctions/tests/helpers/start-app', 'auctions/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('auctions/tests/helpers/start-app', ['exports', 'auctions/app', 'auctions/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('auctions/tests/integration/components/categories-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('categories-component', 'Integration | Component | categories component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xzPsLiDc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"categories-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zu031163\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"categories-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/components/footer-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('footer-component', 'Integration | Component | footer component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w/Y6Wwu7\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"footer-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XCyOfH/2\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"footer-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/components/header-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('header-component', 'Integration | Component | header component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PmCEARoP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"header-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Ue2qwXxb\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"header-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/components/price-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('price-component', 'Integration | Component | price component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"l0/g0w7k\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"price-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"X0umWjh6\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"price-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/components/product-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('product-component', 'Integration | Component | product component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Wvytx4F3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"product-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"u1XCjswA\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"product-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/components/rating-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('rating-component', 'Integration | Component | rating component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"5QeI0RTY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"rating-component\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QFK5uJUP\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rating-component\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('auctions/tests/integration/helpers/contains-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('contains', 'helper:contains', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"oRjBKgb+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"contains\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/integration/helpers/division-helper-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('division-helper', 'helper:division-helper', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lMj5YRFQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"division-helper\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/integration/helpers/if-equals-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('if-equals', 'helper:if-equals', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"32aWmNkt\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"if-equals\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/integration/helpers/lowercase-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('lowercase', 'helper:lowercase', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NEo3QuiU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"lowercase\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/integration/helpers/pagination-array-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('pagination-array', 'helper:pagination-array', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"mHWfD9CX\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"pagination-array\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/integration/helpers/uppercase-helper-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('uppercase-helper', 'helper:uppercase-helper', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"NABO5Shq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"uppercase-helper\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('auctions/tests/test-helper', ['auctions/app', 'auctions/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('auctions/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/categories-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/categories-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/footer-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/footer-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/header-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/header-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/price-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/price-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/product-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/product-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rating-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rating-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/contains-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/contains-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/division-helper-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/division-helper-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/if-equals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/if-equals-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/lowercase-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/lowercase-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/pagination-array-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/pagination-array-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/uppercase-helper-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/uppercase-helper-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/seller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/seller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ajax-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/product-service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/product-service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/user-service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/user-service-test.js should pass ESLint\\n\\n');\n  });\n});","define('auctions/tests/unit/controllers/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('auctions/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('auctions/tests/unit/controllers/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('auctions/tests/unit/routes/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin', 'Unit | Route | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/seller-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:seller', 'Unit | Route | seller', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/routes/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:user', 'Unit | Route | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('auctions/tests/unit/services/ajax-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('auctions/tests/unit/services/product-service-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:product-service', 'Unit | Service | product service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('auctions/tests/unit/services/user-service-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:user-service', 'Unit | Service | user service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('auctions/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsllBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}